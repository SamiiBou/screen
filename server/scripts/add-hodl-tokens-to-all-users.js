const mongoose = require('mongoose')
const dotenv = require('dotenv')

// Charger les variables d'environnement
dotenv.config()

// Mod√®le User simplifi√© pour le script
const UserSchema = new mongoose.Schema({
  username: String,
  walletAddress: String,
  hodlTokenBalance: {
    type: Number,
    default: 5,
    min: 0
  }
}, {
  timestamps: true
})

const User = mongoose.model('User', UserSchema)

async function addHodlTokensToAllUsers() {
  console.log('üöÄ D√©marrage du script d\'ajout de tokens HODL...')
  
  try {
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/button-game')
    console.log('‚úÖ Connect√© √† MongoDB')
    
    // R√©cup√©rer tous les utilisateurs
    const users = await User.find({})
    console.log(`üìä ${users.length} utilisateurs trouv√©s`)
    
    if (users.length === 0) {
      console.log('‚ÑπÔ∏è Aucun utilisateur trouv√© dans la base de donn√©es')
      return
    }
    
    let updatedCount = 0
    let skippedCount = 0
    
    console.log('\nüîÑ Traitement des utilisateurs...')
    
    for (const user of users) {
      const currentBalance = user.hodlTokenBalance || 0
      
      if (currentBalance >= 5) {
        console.log(`‚è≠Ô∏è ${user.username} (${user.walletAddress?.slice(0, 8)}...): d√©j√† ${currentBalance} tokens, ignor√©`)
        skippedCount++
        continue
      }
      
      // Ajouter 5 tokens (ou compl√©ter jusqu'√† 5)
      const tokensToAdd = 5 - currentBalance
      user.hodlTokenBalance = 5
      await user.save()
      
      console.log(`‚úÖ ${user.username} (${user.walletAddress?.slice(0, 8)}...): +${tokensToAdd} tokens (${currentBalance} ‚Üí 5)`)
      updatedCount++
    }
    
    console.log('\nüìä R√©sum√©:')
    console.log(`‚úÖ Utilisateurs mis √† jour: ${updatedCount}`)
    console.log(`‚è≠Ô∏è Utilisateurs ignor√©s: ${skippedCount}`)
    console.log(`üìÑ Total trait√©: ${users.length}`)
    
    if (updatedCount > 0) {
      console.log('\nüéâ Tokens HODL ajout√©s avec succ√®s √† tous les utilisateurs!')
    } else {
      console.log('\n‚ÑπÔ∏è Aucune mise √† jour n√©cessaire - tous les utilisateurs ont d√©j√† suffisamment de tokens')
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ajout des tokens:', error)
    process.exit(1)
  } finally {
    // Fermer la connexion
    await mongoose.disconnect()
    console.log('üîå Connexion MongoDB ferm√©e')
    process.exit(0)
  }
}

// Fonction pour donner des tokens √† un utilisateur sp√©cifique
async function addTokensToSpecificUser(walletAddress, amount = 5) {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/button-game')
    
    const user = await User.findOne({ walletAddress: walletAddress.toLowerCase() })
    if (!user) {
      console.log(`‚ùå Utilisateur avec l'adresse ${walletAddress} non trouv√©`)
      return
    }
    
    const oldBalance = user.hodlTokenBalance || 0
    user.hodlTokenBalance = oldBalance + amount
    await user.save()
    
    console.log(`‚úÖ ${user.username}: +${amount} tokens (${oldBalance} ‚Üí ${user.hodlTokenBalance})`)
    
  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await mongoose.disconnect()
  }
}

// Fonction pour reset tous les utilisateurs √† 5 tokens
async function resetAllUsersTo5Tokens() {
  console.log('üîÑ Reset de tous les utilisateurs √† 5 tokens...')
  
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/button-game')
    
    const result = await User.updateMany({}, { hodlTokenBalance: 5 })
    console.log(`‚úÖ ${result.modifiedCount} utilisateurs reset√©s √† 5 tokens`)
    
  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await mongoose.disconnect()
  }
}

// Fonction principale
async function main() {
  const args = process.argv.slice(2)
  const command = args[0]
  
  switch (command) {
    case 'add':
      await addHodlTokensToAllUsers()
      break
      
    case 'reset':
      await resetAllUsersTo5Tokens()
      break
      
    case 'user':
      const address = args[1]
      const amount = parseInt(args[2]) || 5
      if (!address) {
        console.log('‚ùå Usage: npm run hodl-script user <wallet_address> [amount]')
        process.exit(1)
      }
      await addTokensToSpecificUser(address, amount)
      break
      
    default:
      console.log('üîß Script de gestion des tokens HODL')
      console.log('')
      console.log('Usage:')
      console.log('  node server/scripts/add-hodl-tokens-to-all-users.js add    - Ajouter 5 tokens √† tous les utilisateurs')
      console.log('  node server/scripts/add-hodl-tokens-to-all-users.js reset  - Reset tous les utilisateurs √† 5 tokens')
      console.log('  node server/scripts/add-hodl-tokens-to-all-users.js user <address> [amount] - Ajouter des tokens √† un utilisateur sp√©cifique')
      console.log('')
      console.log('Exemples:')
      console.log('  node server/scripts/add-hodl-tokens-to-all-users.js add')
      console.log('  node server/scripts/add-hodl-tokens-to-all-users.js user 0x123... 10')
      break
  }
}

// Ex√©cuter le script
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erreur fatale:', error)
    process.exit(1)
  })
}

module.exports = {
  addHodlTokensToAllUsers,
  addTokensToSpecificUser,
  resetAllUsersTo5Tokens
} 