"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const User_1 = __importDefault(require("../models/User"));
const auth_1 = require("../middleware/auth");
const voucher_1 = require("../utils/voucher");
const router = express_1.default.Router();
/**
 * GET /api/hodl/balance
 * R√©cup√®re la balance de tokens HODL de l'utilisateur
 */
router.get('/balance', auth_1.auth, async (req, res) => {
    try {
        const user = await User_1.default.findById(req.user.id);
        if (!user) {
            return res.status(404).json({ error: 'Utilisateur non trouv√©' });
        }
        res.json({
            balance: user.hodlTokenBalance,
            walletAddress: user.walletAddress
        });
    }
    catch (error) {
        console.error('Erreur lors de la r√©cup√©ration de la balance:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});
/**
 * POST /api/hodl/generate-voucher
 * G√©n√®re un voucher sign√© pour claim des tokens
 */
router.post('/generate-voucher', auth_1.auth, async (req, res) => {
    try {
        console.log('üîç [DEBUG] Generate voucher called from:', req.headers['user-agent']);
        console.log('üîç [DEBUG] Request URL:', req.originalUrl);
        console.log('üîç [DEBUG] Request method:', req.method);
        console.log('üîç [DEBUG] Current working directory:', process.cwd());
        console.log('üîç [DEBUG] NODE_ENV:', process.env.NODE_ENV);
        console.log('üîç [DEBUG] All env variables related to TOKEN:', Object.keys(process.env).filter(key => key.includes('TOKEN')));
        const user = await User_1.default.findById(req.user.id);
        if (!user) {
            return res.status(404).json({ error: 'Utilisateur non trouv√©' });
        }
        // V√©rifier que l'utilisateur a des tokens √† claim
        if (user.hodlTokenBalance <= 0) {
            return res.status(400).json({ error: 'Aucun token √† claim' });
        }
        // Stocker la balance SANS la d√©biter imm√©diatement
        const tokensToHodl = user.hodlTokenBalance;
        // R√©cup√©rer la cl√© priv√©e depuis les variables d'environnement
        console.log('üîç [DEBUG] Looking for TOKEN_PRIVATE_KEY...');
        console.log('üîç [DEBUG] TOKEN_PRIVATE_KEY exists:', !!process.env.TOKEN_PRIVATE_KEY);
        console.log('üîç [DEBUG] TOKEN_PRIVATE_KEY length:', process.env.TOKEN_PRIVATE_KEY?.length || 0);
        console.log('üîç [DEBUG] TOKEN_PRIVATE_KEY starts with 0x:', process.env.TOKEN_PRIVATE_KEY?.startsWith('0x'));
        const privateKey = process.env.TOKEN_PRIVATE_KEY;
        if (!privateKey) {
            console.error('‚ùå [DEBUG] TOKEN_PRIVATE_KEY non configur√©e');
            console.error('üîç [DEBUG] Available env vars:', Object.keys(process.env).sort());
            return res.status(500).json({ error: 'Configuration serveur manquante' });
        }
        console.log('‚úÖ [DEBUG] TOKEN_PRIVATE_KEY found, generating voucher...');
        // G√©n√©rer le voucher sign√©
        const { voucher, signature } = await (0, voucher_1.generateSignedVoucher)(user.walletAddress, tokensToHodl, privateKey);
        // NE PAS d√©biter la balance ici - attendre la confirmation de transaction
        res.json({
            voucher,
            signature,
            message: `Voucher g√©n√©r√© pour ${tokensToHodl} tokens HODL`
        });
    }
    catch (error) {
        console.error('‚ùå [DEBUG] Erreur lors de la g√©n√©ration du voucher:', error);
        console.error('üîç [DEBUG] Error stack:', error instanceof Error ? error.stack : 'No stack');
        res.status(500).json({ error: 'Erreur lors de la g√©n√©ration du voucher' });
    }
});
/**
 * POST /api/hodl/claim-success
 * Marque un claim comme r√©ussi (appel√© apr√®s confirmation de transaction)
 */
router.post('/claim-success', auth_1.auth, async (req, res) => {
    try {
        const { transactionHash, amount } = req.body;
        if (!transactionHash) {
            return res.status(400).json({ error: 'Hash de transaction requis' });
        }
        const user = await User_1.default.findById(req.user.id);
        if (!user) {
            return res.status(404).json({ error: 'Utilisateur non trouv√©' });
        }
        // MAINTENANT d√©biter la balance de l'utilisateur
        const previousBalance = user.hodlTokenBalance;
        user.hodlTokenBalance = 0;
        await user.save();
        // Log pour le suivi
        console.log(`‚úÖ Claim r√©ussi pour utilisateur ${req.user.id}:`, {
            transactionHash,
            amount,
            previousBalance,
            newBalance: user.hodlTokenBalance,
            timestamp: new Date()
        });
        res.json({
            success: true,
            message: 'Claim confirm√© avec succ√®s',
            transactionHash,
            claimedAmount: previousBalance
        });
    }
    catch (error) {
        console.error('Erreur lors de la confirmation du claim:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});
/**
 * POST /api/hodl/add-tokens
 * Ajoute des tokens √† la balance d'un utilisateur (pour tests/admin)
 */
router.post('/add-tokens', auth_1.auth, async (req, res) => {
    try {
        const { amount } = req.body;
        if (!amount || amount <= 0) {
            return res.status(400).json({ error: 'Montant invalide' });
        }
        const user = await User_1.default.findById(req.user.id);
        if (!user) {
            return res.status(404).json({ error: 'Utilisateur non trouv√©' });
        }
        user.hodlTokenBalance += amount;
        await user.save();
        res.json({
            success: true,
            newBalance: user.hodlTokenBalance,
            message: `${amount} tokens ajout√©s √† votre balance`
        });
    }
    catch (error) {
        console.error('Erreur lors de l\'ajout de tokens:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});
/**
 * POST /api/hodl/claim-failed
 * Marque un claim comme √©chou√© (appel√© apr√®s √©chec de transaction)
 */
router.post('/claim-failed', auth_1.auth, async (req, res) => {
    try {
        const { error, transactionId } = req.body;
        const user = await User_1.default.findById(req.user.id);
        if (!user) {
            return res.status(404).json({ error: 'Utilisateur non trouv√©' });
        }
        // Log pour le suivi
        console.log(`‚ùå Claim √©chou√© pour utilisateur ${req.user.id}:`, {
            error,
            transactionId,
            currentBalance: user.hodlTokenBalance,
            timestamp: new Date()
        });
        // Retourner la balance actuelle pour s'assurer que le frontend est synchronis√©
        res.json({
            success: true,
            message: '√âchec du claim enregistr√©',
            currentBalance: user.hodlTokenBalance
        });
    }
    catch (error) {
        console.error('Erreur lors de l\'enregistrement de l\'√©chec:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});
exports.default = router;
